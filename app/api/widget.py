from fastapi import APIRouter, HTTPException, Query
from sqlalchemy.orm import Session
from typing import Optional
from app.services.openstates_api import OpenStatesAPI
from app.services.openai_service import OpenAIService
from app.services.google_civic_api import GoogleCivicAPI
from pydantic import BaseModel
import logging

router = APIRouter()

# Initialize services
openstates_api = OpenStatesAPI()
openai_service = OpenAIService()
google_civic_api = GoogleCivicAPI()

class WidgetBillResponse(BaseModel):
    id: str
    title: str
    summary: str
    key_provisions: list = []
    impact: str
    status: str
    chamber: str
    sponsors: list = []

@router.get("/bill/{bill_id}", response_model=WidgetBillResponse)
async def get_widget_bill_data(bill_id: str):
    """
    Get bill data for widget display
    """
    try:
        # Try to get real bill data first
        bill_data = openstates_api.get_bill_by_id(bill_id)
        
        if not bill_data:
            # If specific bill not found, use default demo bill
            bill_data = {
                'id': bill_id,
                'title': 'Assembly Bill 123 - California Environmental Protection Act',
                'abstract': 'This bill would establish new environmental protection standards for California, including enhanced air quality monitoring, stricter emissions controls for vehicles, and expanded renewable energy requirements for public buildings.',
                'status': 'In Committee',
                'from_organization': {'name': 'California State Assembly'},
                'sponsorships': [{'person': {'name': 'Assembly Member Smith', 'party': [{'name': 'Democratic'}]}}]
            }
        
        # Try to get AI summary
        summary = None
        if bill_data.get('title') and bill_data.get('abstract'):
            summary = openai_service.generate_bill_summary(
                title=bill_data.get('title', ''),
                text=bill_data.get('abstract', ''),
                bill_id=bill_id
            )
        
        # Fallback summary if AI service not available
        if not summary:
            summary = {
                'title': bill_data.get('title', 'Sample Bill Title'),
                'summary': 'This is a sample bill summary. The actual summary would be generated by AI analysis of the bill text.',
                'key_provisions': [
                    'Establishes new environmental standards',
                    'Requires enhanced monitoring systems', 
                    'Sets stricter emissions controls'
                ],
                'impact': 'This bill would affect environmental regulations and compliance requirements for businesses and government agencies.',
                'status': bill_data.get('status', 'Unknown')
            }
        
        if not summary:
            # Fallback summary for demo
            summary = {
                'summary': 'This environmental protection bill introduces comprehensive measures to improve California\'s air quality and accelerate the transition to renewable energy. It establishes new monitoring systems and sets stricter standards for emissions.',
                'key_provisions': [
                    'Enhanced air quality monitoring statewide',
                    'Stricter vehicle emissions standards', 
                    'Renewable energy requirements for public buildings'
                ],
                'impact': 'This bill will improve air quality for all Californians, reduce greenhouse gas emissions, and help the state meet its ambitious climate goals while creating new jobs in the clean energy sector.'
            }
        
        # Format response
        response = WidgetBillResponse(
            id=bill_data.get('id', bill_id),
            title=bill_data.get('title', 'Unknown Bill'),
            summary=summary.get('summary', 'Summary not available'),
            key_provisions=summary.get('key_provisions', []),
            impact=summary.get('impact', 'Impact information not available'),
            status=bill_data.get('status', 'Unknown status'),
            chamber=bill_data.get('from_organization', {}).get('name', 'Unknown chamber'),
            sponsors=[{
                'name': sponsor.get('person', {}).get('name', 'Unknown'),
                'party': sponsor.get('person', {}).get('party', [{}])[0].get('name', 'Unknown') if sponsor.get('person', {}).get('party') else 'Unknown'
            } for sponsor in bill_data.get('sponsorships', [])[:3]]
        )
        
        return response
        
    except Exception as e:
        logging.error(f"Error fetching widget bill data: {str(e)}")
        raise HTTPException(status_code=500, detail="Internal server error")

@router.get("/representatives")
async def get_widget_representatives(
    address: str = Query(..., description="Address to lookup representatives for"),
    levels: Optional[str] = Query(None, description="Government levels (federal,state,local)")
):
    """
    Get representatives for widget display
    """
    try:
        # Parse levels parameter
        level_list = None
        if levels:
            level_list = [level.strip() for level in levels.split(',')]
        
        # Fetch representatives data
        representatives_data = google_civic_api.get_representatives(address, level_list)
        
        if not representatives_data:
            # Return mock data for demo
            return {
                "representatives": [
                    {
                        "name": "Senator Jane Smith",
                        "office": "U.S. Senate", 
                        "party": "Democratic",
                        "email": "senator.smith@senate.gov",
                        "phone": "(202) 555-0123"
                    },
                    {
                        "name": "Representative John Doe",
                        "office": "U.S. House of Representatives",
                        "party": "Republican", 
                        "email": "rep.doe@house.gov",
                        "phone": "(202) 555-0456"
                    },
                    {
                        "name": "Assembly Member Maria Garcia",
                        "office": "California State Assembly",
                        "party": "Democratic",
                        "email": "maria.garcia@assembly.ca.gov", 
                        "phone": "(916) 555-0789"
                    }
                ]
            }
        
        return representatives_data
        
    except Exception as e:
        logging.error(f"Error fetching widget representatives: {str(e)}")
        raise HTTPException(status_code=500, detail="Internal server error")
